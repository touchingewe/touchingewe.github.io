{"version":3,"sources":["/_sass/abstractions/_mixins.scss","/_sass/base/_base.scss","/_sass/variables/_colors.scss","/_sass/base/_syntax-highlighting.scss","/_sass/base/_typography.scss","/_sass/variables/_typography.scss","/node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","/_sass/components/_blocks.scss","/node_modules/singularitygs/stylesheets/singularitygs/_api.scss","/node_modules/singularitygs/stylesheets/singularitygs/math/_columns.scss","/node_modules/singularitygs/stylesheets/singularitygs/helpers/_directions.scss","/node_modules/singularitygs/stylesheets/singularitygs/api/_isolation.scss","/node_modules/compass-mixins/lib/compass/utilities/general/_clearfix.scss","/node_modules/compass-mixins/lib/compass/utilities/general/_hacks.scss","/_sass/components/_navigation.scss","/_sass/main.scss","/_sass/variables/_grid.scss"],"names":[],"mappings":"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AU;EACV,iBAAiB;EACjB,oDCjB8C;EDkB9C,iBAAiB,EAMlB;EAVD;IAOI,eAAe;IACf,sBAAsB,EACvB;;AAGH;EACE,uBAAuB;EACvB,eF3BkB;EFElB,gBI0BuB;EJzBvB,kBALgB;EI+BhB,4CC7ByC;ED8BzC,iBAAiB;EACjB,mBAAmB;EACnB,gBAAgB,EACjB;;AAED;EJjCE,gBIiC0B;EJhC1B,mBALgB;EIqCa,eFxBX,EEwBgC;;AACpD;EJlCE,gBIkC0B;EJjC1B,oBALgB,EIsCe;;AACjC;EJnCE,gBImC0B;EJlC1B,gBALgB,EIuCe;;AACjC;EJpCE,gBIoC0B;EJnC1B,oBALgB,EIwCe;;AACjC;EJrCE,gBIqC0B;EJpC1B,oBALgB,EIyCe;;AEoB7B;EFjBF;IJxCA,gBIyCuB;IJxCvB,oBALgB;II8ChB,cAAc,EAGf,EAAA;EEYG;IFjBF;MJxCA,gBI4CuB;MJ3CvB,qBALgB,EIiDjB,EAAA;;AEYG;EFXJ;IJ9CE,gBI+CuB;IJ9CvB,oBALgB,EIsDjB,EAAA;EEOG;IFXJ;MJ9CE,gBIiDuB;MJhDvB,qBALgB,EIsDjB,EAAA;;AEOG;EFNJ;IJnDE,gBIoDuB;IJnDvB,oBALgB,EI2DjB,EAAA;EEEG;IFNJ;MJnDE,gBIsDuB;MJrDvB,mBALgB,EI2DjB,EAAA;;AEEG;EFDJ;IJxDE,gBIyDuB;IJxDvB,gBALgB,EIgEjB,EAAA;EEHG;IFDJ;MJxDE,gBI2DuB;MJ1DvB,oBALgB,EIgEjB,EAAA;;AEHG;EFIJ;IJ7DE,gBI8DuB;IJ7DvB,oBALgB,EIqEjB,EAAA;EERG;IFIJ;MJ7DE,gBIgEuB;MJ/DvB,gBALgB,EIqEjB,EAAA;;AERG;EFSJ;IJlEE,gBImEuB;IJlEvB,oBALgB,EI0EjB,EAAA;EEbG;IFSJ;MJlEE,gBIqEuB;MJpEvB,gBALgB,EI0EjB,EAAA;;AAGD;EJzEE,gBI0EsB;EJzEtB,oBALgB;EI+EhB,kBAAkB;EAElB,iBAAiB,EAKlB;;AAMD;EACI,UAAU;EACV,qBAAqB,EAKxB;EAPD;IAKM,iBAAiB,EAClB;;AAOL;EACI,sBAAsB;EACtB,eF1Gc,EE2Gf;;AACD;EACE,2BAA2B;EAC3B,eF7GgB,EE8GjB;;AAED;EAAO,eF/GU,EE+GU;;AAM3B;EJpHA,gBIqHyB;EJpHzB,oBALgB;EI0Hd,iBAAiB;EACjB,eF1Hc;EE2Hd,sBAAqB,EACtB;;AG/HH;ECgGI,YCzEyB;EDyEzB,aE5Fa;EF4Fb,eG5DgD;EH4DhD,gBGtDkD;EHsDlD,YGpB0C;ECjE5C,iBAAiB;GCaf,QAAS;ENrBT,mBAAmB;EACnB,sBAAsB,EAmBzB;EAjBG;IPAF,eOC4B;IPA5B,qBALgB,EOUb;IDmDD;MC/DJ;QPME,gBOIiC;QPHjC,oBALgB,EOUb,EAAA;EAED;;IAEI,sBAAsB;IACtB,eLdU,EKeb;EAEA;IACG,YLVK,EKWR;;AOvBL;iCACiC;AAMjC;;GAEG;AACH;EACE,2BZAW;EYCX,iCZGmB;EYFnB,iBAAiB;EAGjB,mBAAmB,EACpB;;AAED;EdZE,gBcauB;EdZvB,oBALgB;EckBhB,iBAAiB;EACjB,kBAAkB;EAClB,qBAAqB;EACrB,iBAAiB;EACjB,YAAY,EAMb;EAZD;IAUI,YZjBS,EYkBV;;AAGH;EACE,aAAa;EACb,kBAAkB;EAehB,mBAAmB;EACnB,SAAS;EACT,aAAa;EACb,uBZ1CS;EY2CT,0BZvCiB;EYwCjB,mBAAmB;EACnB,kBAAkB,EAoCrB;EAvDC;IACE,cAAc,EACf;EAED;IACE,YZ9BS,EYoCV;IAPD;MAKI,mBAAmB,EACpB;EAWD;IACE,eAAe;IACf,aAAa;IACb,YAAY;IACZ,aAAa;IACb,eAAe;IACf,kBAAkB;IAClB,mBAAmB,EAKpB;IAHO;MACJ,WZxDK,EYyDN;EAGH;IACE,YAAY;IACZ,cAAc,EACf;EA1CL;IA6CM,eAAe;IACf,oBAAoB,EACrB;EAED;IACE,eAAe;IACf,kBAAkB;IAKlB,kBAAkB,EACnB;IAzDL;MAsDQ,gBAAgB,EACjB;;AC9EP;EPuFI,YCzEyB;EDyEzB,aE5Fa;EF4Fb,eG5DgD;EH4DhD,gBGtDkD;EHsDlD,YGpB0C;EIjE5C,0BbRgB;EaShB,YbDW;EaEX,uBAAuB;EACvB,iBAAiB;EACjB,oBAAoB;EACpB,mBAAmB,EACpB;;AAGD;EP4EI,YCzEyB;EDyEzB,aE5Fa;EF4Fb,eG5DgD;EH4DhD,gBGtDkD;EHsDlD,YGpB0C;EItD5C,uBbZW;EaaX,YbZW;EaaX,gBAAgB;EAChB,uBAAuB;EACvB,iBAAiB;EACjB,oBAAoB,EACrB;;AAED;EPkEI,YCzEyB;EDyEzB,aE5Fa;EF4Fb,eG5DgD;EH4DhD,gBGtDkD;EHsDlD,YGpB0C;ECjE5C,iBAAiB;GCaf,QAAS;EEUT,YAAY;EACZ,uBAAuB;EAC1B,eAAe,EAWf;ETgBG;ISjCJ;MASE,WAAW;MACX,0BAA0B;MAC1B,YCjCQ,EDuCT,EAAA;ETgBG;ISjCJ;MAeE,YCpCS,EDsCV,EAAA","file":"main.css","sourcesContent":["/* REMS with a PX Fallback */\r\n@function calculateRem($size) {\r\n  $remSize: $size / 16px;\r\n  @return $remSize * 1rem;\r\n}\r\n\r\n@mixin font-size($size) {\r\n  font-size: $size;\r\n  font-size: calculateRem($size);\r\n}\r\n","/**\n * Reset some basic elements\n */\nbody, h1, h2, h3, h4, h5, h6,\np, blockquote, pre, hr,\ndl, dd, ol, ul, figure {\n  margin: 0;\n  padding: 0;\n}\n\n\n/**\n * Set `margin-bottom` to maintain vertical rhythm\n */\nh1, h2, h3, h4, h5, h6,\np, blockquote, pre,\nul, ol, dl, figure,\n%vertical-rhythm {\n  margin-bottom: 1em;\n}\n\n\n\n/**\n * Images\n */\nimg {\n  max-width: 100%;\n  vertical-align: middle;\n}\n\n\n\n/**\n * Figures\n */\nfigure > img {\n  display: block;\n}\n\nfigcaption {\n  @include font-size(10px);\n}\n\n\n\n/**\n * Lists\n */\nul, ol {\n  \n}\n\nli {\n  > ul,\n  > ol {\n    \n  }\n}\n\n\n/**\n * Headings\n */\nh1, h2, h3, h4, h5, h6 {\n  font-weight: 700;\n}\n\n/**\n * Links\n */\na {\n  color: $primary;\n  text-decoration: none;\n\n  &:visited {\n    color: darken($primary, 15%);\n  }\n\n  &:hover {\n    color: $secondary;\n    text-decoration: underline;\n  }\n}\n\n/**\n * Blockquotes\n */\nblockquote {\n  color: $grey;\n  border-left: 4px solid $light-grey;\n  padding-left: 0.5em;\n  font-size: 18px;\n  letter-spacing: -1px;\n  font-style: italic;\n\n  > :last-child {\n    margin-bottom: 0;\n  }\n}\n\n/**\n * Code formatting\n */\npre,\ncode {\n  font-size: 15px;\n  border: 1px solid $light-grey;\n  border-radius: 3px;\n  background-color: $white;\n}\n\ncode {\n  padding: 1px 5px;\n}\n\npre {\n  padding: 8px 12px;\n  overflow-x: auto;\n\n  > code {\n    border: 0;\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n/**\n * Icons\n */\n.icon > svg {\n  display: inline-block;\n  vertical-align: middle;\n\n  path {\n    fill: $grey;\n  }\n}\n","//////////////////////////////\r\n// COLOURS\r\n//////////////////////////////\r\n\r\n$primary : #03406C; // blue\r\n$secondary : #262626; // dark-grey (pantone Coll Grey 11)\r\n$tertiary : #D9D9D9; // light-grey\r\n\r\n$tertiary-light : #F3F3F3; // lighter - grey\r\n$primary-light : #94D2FF; // light-blue\r\n\r\n$black : #000;\r\n$white : #FFF;\r\n\r\n$grey : #918F90; // used in slogan\r\n$light-grey : #f5f5f5;\r\n$dark-grey : #585859;\r\n\r\n$transparent: rgba(#03406C, 0.8);\r\n$gallery-transparent: rgba(#03406C, 0.5);\r\n\r\n// MENU COLOURS\r\n\r\n$menu1 : #e9004f;\r\n$menu2 : #5daedf;\r\n$menu3 : #b5dd20;\r\n$menu4 : #fcae14;","/**\n * Syntax highlighting styles\n */\n.highlight {\n  background: $white;\n  margin-top: 1em;\n  margin-bottom: 1em;\n  @extend %vertical-rhythm;\n\n  .highlighter-rouge & {\n    background: $light-grey;\n  }\n\n  .c     { color: #998; font-style: italic } // Comment\n  .err   { color: #a61717; background-color: #e3d2d2 } // Error\n  .k     { font-weight: bold } // Keyword\n  .o     { font-weight: bold } // Operator\n  .cm    { color: #998; font-style: italic } // Comment.Multiline\n  .cp    { color: #999; font-weight: bold } // Comment.Preproc\n  .c1    { color: #998; font-style: italic } // Comment.Single\n  .cs    { color: #999; font-weight: bold; font-style: italic } // Comment.Special\n  .gd    { color: #000; background-color: #fdd } // Generic.Deleted\n  .gd .x { color: #000; background-color: #faa } // Generic.Deleted.Specific\n  .ge    { font-style: italic } // Generic.Emph\n  .gr    { color: #a00 } // Generic.Error\n  .gh    { color: #999 } // Generic.Heading\n  .gi    { color: #000; background-color: #dfd } // Generic.Inserted\n  .gi .x { color: #000; background-color: #afa } // Generic.Inserted.Specific\n  .go    { color: #888 } // Generic.Output\n  .gp    { color: #555 } // Generic.Prompt\n  .gs    { font-weight: bold } // Generic.Strong\n  .gu    { color: #aaa } // Generic.Subheading\n  .gt    { color: #a00 } // Generic.Traceback\n  .kc    { font-weight: bold } // Keyword.Constant\n  .kd    { font-weight: bold } // Keyword.Declaration\n  .kp    { font-weight: bold } // Keyword.Pseudo\n  .kr    { font-weight: bold } // Keyword.Reserved\n  .kt    { color: #458; font-weight: bold } // Keyword.Type\n  .m     { color: #099 } // Literal.Number\n  .s     { color: #d14 } // Literal.String\n  .na    { color: #008080 } // Name.Attribute\n  .nb    { color: #0086B3 } // Name.Builtin\n  .nc    { color: #458; font-weight: bold } // Name.Class\n  .no    { color: #008080 } // Name.Constant\n  .ni    { color: #800080 } // Name.Entity\n  .ne    { color: #900; font-weight: bold } // Name.Exception\n  .nf    { color: #900; font-weight: bold } // Name.Function\n  .nn    { color: #555 } // Name.Namespace\n  .nt    { color: #000080 } // Name.Tag\n  .nv    { color: #008080 } // Name.Variable\n  .ow    { font-weight: bold } // Operator.Word\n  .w     { color: #bbb } // Text.Whitespace\n  .mf    { color: #099 } // Literal.Number.Float\n  .mh    { color: #099 } // Literal.Number.Hex\n  .mi    { color: #099 } // Literal.Number.Integer\n  .mo    { color: #099 } // Literal.Number.Oct\n  .sb    { color: #d14 } // Literal.String.Backtick\n  .sc    { color: #d14 } // Literal.String.Char\n  .sd    { color: #d14 } // Literal.String.Doc\n  .s2    { color: #d14 } // Literal.String.Double\n  .se    { color: #d14 } // Literal.String.Escape\n  .sh    { color: #d14 } // Literal.String.Heredoc\n  .si    { color: #d14 } // Literal.String.Interpol\n  .sx    { color: #d14 } // Literal.String.Other\n  .sr    { color: #009926 } // Literal.String.Regex\n  .s1    { color: #d14 } // Literal.String.Single\n  .ss    { color: #990073 } // Literal.String.Symbol\n  .bp    { color: #999 } // Name.Builtin.Pseudo\n  .vc    { color: #008080 } // Name.Variable.Class\n  .vg    { color: #008080 } // Name.Variable.Global\n  .vi    { color: #008080 } // Name.Variable.Instance\n  .il    { color: #099 } // Literal.Number.Integer.Long\n}\n","//////////////////////////////\r\n// TYPOGRAPHY IMPORT FONT\r\n//////////////////////////////\r\n\r\n\r\n\r\n\r\n//////////////////////////////\r\n// TYPOGRAPHY STYLES\r\n//////////////////////////////\r\n\r\nhtml { font-family: $Roboto; }\r\n\r\nh1 \r\n{ \r\n  font-size: 40px;   \r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n  margin: 0;\r\n  padding: 0.5em 0;\r\n  font-family: $Roboto;\r\n  font-weight: 700;\r\n\r\n  a, a:visited {\r\n    color: inherit;\r\n    text-decoration: none;\r\n  }\r\n}\r\n\r\nh1 { \r\n  box-sizing: border-box;\r\n  color: $secondary;\r\n  @include font-size(24px);\r\n  font-family: $RobotoCond;\r\n  font-weight: 400;\r\n  position: relative;\r\n  margin-top: 1em;\r\n}\r\n\r\nh2 { @include font-size(20px); color: $dark-grey; }\r\nh3 { @include font-size(18px); }\r\nh4 { @include font-size(16px); }\r\nh5 { @include font-size(14px); }\r\nh6 { @include font-size(14px); }\r\n\r\n@include breakpoint($tab, true) {\r\n  h1 {\r\n  @include font-size(30px);\r\n  margin-top: 0;\r\n  @include breakpoint($desk,true) {\r\n  @include font-size(35px); }\r\n}\r\nh2 {\r\n  @include font-size(18px);\r\n  @include breakpoint($desk,true) {\r\n  @include font-size(25px); }\r\n}\r\nh3 {\r\n  @include font-size(18px);\r\n  @include breakpoint($desk,true) {\r\n  @include font-size(20px); }\r\n}\r\nh4 {\r\n  @include font-size(16px);\r\n  @include breakpoint($desk,true) {\r\n  @include font-size(18px); }\r\n}\r\nh5 {\r\n  @include font-size(14px);\r\n  @include breakpoint($desk,true) {\r\n  @include font-size(16px); }\r\n}\r\nh6 {\r\n  @include font-size(14px);\r\n  @include breakpoint($desk,true) {\r\n  @include font-size(16px); }\r\n}\r\n}\r\n\r\np {\r\n\t@include font-size(14px); \r\n  line-height: 20px; \r\n  // font-weight: 300;\r\n  font-weight: 400;\r\n\r\n\t@include breakpoint($tab, true) { \r\n    // @include font-size(16px); \r\n  }\r\n}\r\n\r\n/////////////////////////////\r\n// LISTS\r\n/////////////////////////////\r\n\r\nul {\r\n    margin: 0;\r\n    padding: 0 0 0 1.5em;\r\n\r\n    li {\r\n      padding: 0 0 0 0;\r\n    }\r\n}\r\n\r\n/////////////////////////////\r\n// LINKS\r\n/////////////////////////////\r\n\r\na, a:visited {\r\n    text-decoration: none;\r\n    color: $primary;\r\n  }\r\n  a:hover {\r\n    text-decoration: underline;\r\n    color: $secondary;\r\n  }\r\n\r\n  .tel { color: $tertiary; }\r\n\r\n  ///////////////////////////\r\n  // DATE\r\n  ///////////////////////////\r\n\r\n  .date-display-range {\r\n    @include font-size(18px);\r\n    font-weight: 400;\r\n    color: $primary;\r\n    padding-bottom:0.5em;\r\n  }","//////////////////////////////\r\n// TYPOGRAPHY LAYOUT\r\n//////////////////////////////\r\n\r\n$Roboto : 'Roboto', Helvetica, Arial, sans-serif;\r\n$RobotoCond: 'Roboto Condensed', sans-serif;","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","\r\n.ta-design { \r\n    @include grid-span(12,1); \r\n    @include clearfix; \r\n    text-align: center; \r\n    padding: 0px 0 10px 0; \r\n        \r\n    p {\r\n        @include font-size(9px); \r\n\r\n        @include breakpoint($desk,true) { \r\n            @include font-size(10px); \r\n        }\r\n    } \r\n\r\n    a,\r\n    a:visited {\r\n        text-decoration: none;\r\n        color: $primary;\r\n    }\r\n\r\n    a:hover {\r\n        color: $white;\r\n    }\r\n}","@import \"api/float\";\n@import \"api/isolation\";\n@import \"api/calc\";\n\n//////////////////////////////\n// Master Grid Span mixin\n//////////////////////////////\n@mixin grid-span($span, $location: 1, $grid: null, $gutter: null, $output-style: null, $gutter-style: null, $options: null) {\n\n  @if $output-style == null {\n    $output-style: sgs-get('output');\n  }\n\n  $Grid: find-grid($grid);\n  $Gutter: find-gutter($gutter);\n  $Style: find-gutter-style($gutter-style);\n\n  $Start-Row: start-row($location);\n  $End-Row: end-row($span, $location, $Grid);\n\n  $Fixed-Gutter: fixed-gutter($Grid, $Gutter, $Style);\n  $Split-Gutter: index($Style, 'split');\n  $Gutter-Property: gutter-property($Grid, $Gutter, $Style);\n\n  $Direction: sgs-get('direction');\n  $From: if($options and type-of($options) == 'map', if(map-get($options, 'from'), map-get($options, 'from'), $Direction), $Direction);\n  $From: if($From == 'ltr' or $From == 'rtl', named-direction($From), $From);\n\n  $Holder: ();\n  @each $k, $v in $options {\n    $Holder: if($k == 'from', $Holder, map-merge($Holder, ($k: $v)));\n  }\n  $options: if(length($Holder) > 0, $Holder, null);\n\n  $Span-Map: (\n    'span': $span,\n    'location': $location,\n    'grid': $Grid,\n    'gutter': $Gutter,\n    'style': $Style,\n    'start row': $Start-Row,\n    'end row': $End-Row,\n    'fixed gutter': $Fixed-Gutter,\n    'split gutter': $Split-Gutter,\n    'gutter property': $Gutter-Property,\n    'options': $options\n  );\n\n  @if sgs-get('debug') != false {\n    -sgs-span-settings: inspect($Span-Map);\n  }\n\n\n  @if function-exists('output-#{$output-style}') {\n    $Left: ();\n    $Right: ();\n\n    @if $Direction == 'both' or $From == 'left' or ($Direction == 'rtl' and $From == 'opposite') {\n      $Left: call('output-#{$output-style}', map-merge($Span-Map, ('direction': left)));\n    }\n\n    @if $Direction == 'both' or $From == 'right' or ($Direction == 'ltr' and $From == 'opposite') {\n      $Right: call('output-#{$output-style}', map-merge($Span-Map, ('direction': right)));\n    }\n\n    $Left-Keys: map-keys($Left);\n    $Right-Keys: map-keys($Right);\n    $Exclude: ();\n\n    @each $key in $Left-Keys {\n      @if index($Right-Keys, $key) {\n        @if map-get($Right, $key) == map-get($Left, $key) {\n          $Exclude: append($Exclude, $key);\n        }\n      }\n    }\n\n    // Always try and print the Left value\n    @include grid-span-build-exclude($Left, $Exclude, false);\n\n    // If Direction is Both or RTL, add the RTL attribute selector\n    @if $Direction == 'both' or $Direction == 'rtl' {\n      [dir=\"rtl\"] & {\n        @include grid-span-build-exclude($Right, $Exclude, true);\n      }\n    }\n    @else {\n      @include grid-span-build-exclude($Right, $Exclude, true);\n    }\n  }\n  @else {\n    @warn \"There doesn't appear to be an output style named `#{$output-style}`. Please ensure that the function `output-#{$output-style}` and that the output style `#{$output-style}` are both available before trying to use them.\";\n  }\n}\n\n@mixin grid-span-build($property, $value) {\n  @if type-of($value) != 'map' {\n    #{$property}: $value;\n  }\n  @else {\n    @each $prefix, $val in $value {\n      #{$property}: $val;\n    }\n  }\n}\n\n@mixin grid-span-build-exclude($properties, $delta, $exclude: false) {\n  @each $property, $value in $properties {\n    @if $exclude {\n      @if not index($delta, $property) {\n        @include grid-span-build($property, $value);\n      }\n    }\n    @else {\n      @include grid-span-build($property, $value);\n    }\n  }\n}","//////////////////////////////\n// Find width, in percentages, of the column span\n//////////////////////////////\n@function column-span($span, $location, $grid: null, $gutter: null, $gutter-style: null) {\n  // Find the grid and gutters\n  $grid: find-grid($grid);\n  $gutter: find-gutter($gutter);\n  $gutter-style: find-gutter-style($gutter-style);\n\n  @if fixed-gutter($grid, $gutter, $gutter-style) {\n    $gutter: 0;\n  }\n\n  // @debug $grid;\n  // @debug $gutter;\n\n  // Combine the grid and gutters\n  $grid-and-gutters: column-sum($grid, $gutter, $gutter-style);\n\n  // @debug $grid-and-gutters;\n\n  // Equal width grid are easy! Deal with them!\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    $span-and-gutters: $span + $gutter * ($span - 1);\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  // Asymmetric lists are harder, so we're going to treat them as their own grid\n  @else if type-of($grid) == 'list' or length($grid) > 1 {\n    $span-and-gutters: 0;\n\n    @if $location == 1 and $span >= 1 {\n      @for $i from 1 through $span {\n        $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n      }\n    }\n    @else {\n      $total: $location + $span - 1;\n      @if $total != 0 {\n        @for $i from $location through $total {\n          $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n        }\n      }\n    }\n    $span-and-gutters: $span-and-gutters - $gutter;\n\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  @else {\n    @warn \"Can't find a working set of grid! That's terrible!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find the total sum of the grid\n//////////////////////////////\n@function column-sum($grid, $gutter, $gutter-style) {\n  $split: if(index($gutter-style, 'split'), true, false);\n\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    @if $split {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1))) * nth($gutter, 1));\n    }\n    @else {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1)) - 1) * nth($gutter, 1));\n    }\n\n  }\n  @else if type-of($grid) == 'list' {\n    $sum: 0;\n    @each $column in $grid {\n      $sum: $sum + nth($column, 1);\n    }\n    @if $split {\n      $sum: $sum + (column-count($grid)) * nth($gutter, 1);\n    }\n    @else {\n      $sum: $sum + (column-count($grid) - 1) * nth($gutter, 1);\n    }\n    @return $sum;\n  }\n}\n\n//////////////////////////////\n// Find the number of grid\n//////////////////////////////\n@function column-count($grid) {\n  @if type-of($grid) == 'number' {\n    @return $grid;\n  }\n  @if type-of($grid) == 'list' {\n    @if length($grid) == 1 {\n      @return nth($grid, 1);\n    }\n    @else {\n      @return length($grid);\n    }\n  }\n}","//////////////////////////////\n// Find Opposite Direction\n//////////////////////////////\n@function opposite-direction($dir) {\n  @if $dir == 'left' {\n    @return right;\n  }\n  @else if  $dir == 'right' {\n    @return left;\n  }\n  @else if $dir == 'ltr' {\n    @return rtl;\n  }\n  @else if $dir == 'rtl' {\n    @return ltr;\n  }\n  @else if $dir == 'top' {\n    @return bottom;\n  }\n  @else if $dir == 'bottom' {\n    @return top;\n  }\n  @else {\n    @warn \"#{$dir} is not a direction! Make sure your direction is all lowercase!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find Direction Name\n//////////////////////////////\n@function named-direction($dir) {\n  @if $dir == 'ltr' {\n    @return left;\n  }\n  @else if $dir == 'rtl' {\n    @return right;\n  }\n  @else {\n    @warn \"#{$dir} is not a valid HTML direction! Make sure you are using a valid HTML direction\";\n    @return false;\n  }\n}","@function output-isolation($Span-Map) {\n  // Set up Left/Right maps\n  $Return: ();\n\n  $Span: map-get($Span-Map, 'span');\n  $Location: map-get($Span-Map, 'location');\n\n  $Grid: map-get($Span-Map, 'grid');\n  $Gutter: map-get($Span-Map, 'gutter');\n  $Style: map-get($Span-Map, 'style');\n\n  $Start-Row: map-get($Span-Map, 'start row');\n  $End-Row: map-get($Span-Map, 'end row');\n\n  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\n  $Gutter-Property: map-get($Span-Map, 'gutter property');\n\n  $Direction: map-get($Span-Map, 'direction');\n  $Options: map-get($Span-Map, 'options');\n\n  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);\n  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);\n  $Gutter-Span: gutter-span($Gutter, $Grid);\n\n  // Backwards Compatibility for Options\n  @if type-of($Options) != 'map' and $Options != null {\n    $Options: ('clear': unquote(nth($Options, 1)));\n  }\n\n  $Dir: $Direction;\n  $Opp: opposite-direction($Dir);\n\n  $Return: map-merge($Return, ('width': $Width));\n\n  @if ($End-Row) {\n    $Return: map-merge($Return, ('float': $Opp));\n    $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n\n    @if $Split-Gutter and not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      $Return: map-merge($Return, ('margin-#{$Opp}': 0));\n    }\n  }\n  @else {\n    $Return: map-merge($Return, ('float': $Dir));\n    $Return: map-merge($Return, ('margin-#{$Opp}': -100%));\n\n    @if $Start-Row {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n      }\n    }\n    @else {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span + $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span));\n      }\n    }\n  }\n  // If options are set, we merge them in!\n  @if ($Options) {\n    $Return: map-merge($Return, $Options);\n  }\n\n  // If CLear isn't already available, set it!\n  @if not map-has-key($Return, 'clear') {\n    $Return: map-merge($Return, ('clear': none));\n  }\n\n  // Left Fixed Gutters\n  @if $Fixed-Gutter {\n    @if index($Style, 'split') {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      @if not $End-Row {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\n      }\n    }\n  }\n\n  @return $Return;\n}\n\n//////////////////////////////\n// Happy Syntax for Isolation\n//\n// Makes working with Isolation easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call\n//////////////////////////////\n@mixin isolation-span($Span, $Location, $clear: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\n  $Options: ();\n  @if $clear {\n    $Options: map-merge($Options, ('clear': unquote($clear)));\n  }\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n\n  $Options: if(length($Options) > 0, $Options, null);\n  @include grid-span($Span, $Location, $grid, $gutter, 'isolation', $gutter-style, $Options);\n}\n\n//////////////////////////////\n// Happy Syntax of Asymmetric Grids\n//\n// Makes working with asymmetric grids easier!\n//////////////////////////////\n@mixin asymmetric-span($Location, $Span: false, $grid: false, $gutter: false, $gutter-style: false, $from: false, $output-style: false) {\n\n  $Span: if($Span != false, $Span, 1);\n  $output-style: if($output-style != false, $output-style, sgs-get('asymmetric output'));\n\n  $Options: ();\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n  $Options: if(length($Options) > 0, $Options, null);\n\n  @include grid-span($Span, $Location, $grid, $gutter, $output-style, $gutter-style, $Options);\n}","// @doc off\n// Extends the bottom of the element to enclose any floats it contains.\n// @doc on\n\n@import \"hacks\";\n\n// This basic method is preferred for the usual case, when positioned\n// content will not show outside the bounds of the container.\n//\n// Recommendations include using this in conjunction with a width.\n// Credit: [quirksmode.org](http://www.quirksmode.org/blog/archives/2005/03/clearing_floats.html)\n@mixin clearfix {\n  overflow: hidden;\n  @include has-layout;\n}\n\n// This older method from Position Is Everything called\n// [Easy Clearing](http://www.positioniseverything.net/easyclearing.html)\n// has the advantage of allowing positioned elements to hang\n// outside the bounds of the container at the expense of more tricky CSS.\n@mixin legacy-pie-clearfix {\n  &:after {\n    content    : \"\\0020\";\n    display    : block;\n    height     : 0;\n    clear      : both;\n    overflow   : hidden;\n    visibility : hidden;\n  }\n  @include has-layout;\n}\n\n// This is an updated version of the PIE clearfix method that reduces the amount of CSS output.\n// If you need to support Firefox before 3.5 you need to use `legacy-pie-clearfix` instead.\n//\n// Adapted from: [A new micro clearfix hack](http://nicolasgallagher.com/micro-clearfix-hack/)\n@mixin pie-clearfix {\n  &:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n  @include has-layout;\n}\n","@import \"../../support\";\n\n// The `zoom` approach generates less CSS but does not validate.\n// Set this to `block` to use the display-property to hack the\n// element to gain layout.\n$default-has-layout-approach: zoom !default;\n\n// This mixin causes an element matching the selector\n// to gain the \"hasLayout\" property in internet explorer.\n// More information on [hasLayout](http://reference.sitepoint.com/css/haslayout).\n@mixin has-layout($approach: $default-has-layout-approach) {\n  @if $legacy-support-for-ie {\n    @if $approach == zoom {\n      @include has-layout-zoom;\n    } @else if $approach == block {\n      @include has-layout-block;\n    } @else {\n      @warn \"Unknown has-layout approach: #{$approach}\";\n      @include has-layout-zoom;\n    }\n  }\n}\n\n@mixin has-layout-zoom {\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {\n    *zoom: 1;\n  }\n}\n\n@mixin has-layout-block {\n  @if $legacy-support-for-ie {\n    // This makes ie6 get layout\n    display: inline-block;\n    // and this puts it back to block\n    & { display: block; }\n  }\n}\n\n// A hack to supply IE6 (and below) with a different property value.\n// [Read more](http://www.cssportal.com/css-hacks/#in_css-important).\n@mixin bang-hack($property, $value, $ie6-value) {\n  @if $legacy-support-for-ie6 {\n    #{$property}: #{$value} !important;\n    #{$property}: #{$ie6-value};\n  }\n}\n","/* Top (Main) Navigation\r\n------------------------------ */\r\n\r\n//////////////////////////////\r\n// NAVIGATION LAYOUT\r\n//////////////////////////////\r\n\r\n/**\r\n * Site header\r\n */\r\n.site-header {\r\n  border-top: 5px solid $black;\r\n  border-bottom: 1px solid $light-grey;\r\n  min-height: 56px;\r\n\r\n  // Positioning context for the mobile navigation icon\r\n  position: relative;\r\n}\r\n\r\n.site-title {\r\n  @include font-size(26px);\r\n  font-weight: 300;\r\n  line-height: 56px;\r\n  letter-spacing: -1px;\r\n  margin-bottom: 0;\r\n  float: left;\r\n\r\n  &,\r\n  &:visited {\r\n    color: $white;\r\n  }\r\n}\r\n\r\n.site-nav {\r\n  float: right;\r\n  line-height: 56px;\r\n\r\n  .menu-icon {\r\n    display: none;\r\n  }\r\n\r\n  .page-link {\r\n    color: $white;\r\n\r\n    // Gaps between nav items, but not on the last one\r\n    &:not(:last-child) {\r\n      margin-right: 20px;\r\n    }\r\n  }\r\n\r\n    position: absolute;\r\n    top: 9px;\r\n    right: 0.5em;\r\n    background-color: $black;\r\n    border: 1px solid $light-grey;\r\n    border-radius: 5px;\r\n    text-align: right;\r\n\r\n    .menu-icon {\r\n      display: block;\r\n      float: right;\r\n      width: 36px;\r\n      height: 26px;\r\n      line-height: 0;\r\n      padding-top: 10px;\r\n      text-align: center;\r\n\r\n      > svg path {\r\n        fill: $white;\r\n      }\r\n    }\r\n\r\n    .trigger {\r\n      clear: both;\r\n      display: none;\r\n    }\r\n\r\n    &:hover .trigger {\r\n      display: block;\r\n      padding-bottom: 5px;\r\n    }\r\n\r\n    .page-link {\r\n      display: block;\r\n      padding: 5px 10px;\r\n\r\n      &:not(:last-child) {\r\n        margin-right: 0;\r\n      }\r\n      margin-left: 20px;\r\n    }\r\n\r\n}","@import \"compass\";\r\n@import \"breakpoint\";\r\n@import \"singularitygs\";\r\n\r\n// Import sass partials\r\n@import \"variables/**/*\";\r\n@import \"abstractions/**/*\";\r\n@import \"base/**/*\";\r\n@import \"components/**/*\";\r\n\r\nheader {\r\n  @include grid-span(12,1);\r\n  background-color: $primary;\r\n  color: $white;\r\n  box-sizing: border-box;\r\n  padding-top: 2em;\r\n  padding-bottom: 2em;\r\n  margin-bottom: 2em;\r\n}\r\n\r\n\r\nfooter {\r\n  @include grid-span(12,1);\r\n  background-color: $black;\r\n  color: $white;\r\n  margin-top: 2em;\r\n  box-sizing: border-box;\r\n  padding-top: 2em;\r\n  padding-bottom: 2em;\r\n}\r\n\r\n.wrapper\r\n{\r\n    @include grid-span(12,1);\r\n    @include clearfix;\r\n    float: none;\r\n    box-sizing: border-box;\r\n\tpadding: 0 1em;\r\n\r\n\t@include breakpoint($tab, true) { \r\n\t\tpadding: 0; \r\n\t\tmargin: 0em auto 0em auto; \r\n\t\twidth: $tab; \r\n\t}\r\n\r\n\t@include breakpoint($desk, true) { \r\n\t\twidth: $desk; \r\n\t}\r\n}","//////////////////////////////\r\n// GRID LAYOUT\r\n//////////////////////////////\r\n\r\n// singularitygs\r\n\r\n$grids: 12;\r\n$gutters: 1/3;\r\n\r\n$tab: 44em;\r\n$desk: 70em;\r\n$wide: 90em;\r\n\r\n$touch: point coarse, 'no-query' '.touch';"]}